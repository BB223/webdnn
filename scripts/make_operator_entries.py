import glob
import os
import re

def make_operator_entries(base_dir, standard):
    os.chdir(base_dir)
    import_lines = []
    push_lines = []
    glob_path = "./operators/standard/**/*.ts" if standard else "./operators/**/*.ts"
    for ts_path in sorted(glob.glob(glob_path, recursive=True)):
        ts_relative_path = ts_path.replace("\\", "/")[:-3]
        func_name = "getOpEntries" + re.sub("[^a-zA-Z0-9]", "", ts_relative_path)
        import_lines.append(f"import {{ getOpEntries as {func_name} }} from '{ts_relative_path}';")
        push_lines.append(f"  entries.push(...{func_name}());")
    entry_src = """// auto-generated by scripts/make_operator_entries.py
import { OperatorEntry } from "../../interface/core/operator";

"""+"\n".join(import_lines)+"""

export function getOpEntries(): OperatorEntry[] {
  const entries: OperatorEntry[] = [];
"""+"\n".join(push_lines)+"""
  return entries;
}
"""
    with open(f"{base_dir}/opEntries{'Standard' if standard else 'All'}.ts", "w") as f:
        f.write(entry_src)

def make_operator_entries_all_backend():
    operators_root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + "/src/descriptor_runner/operators/"
    for standard in [False, True]:
        for backend in ["cpu", "wasm", "webgl", "webgpu"]:
            make_operator_entries(operators_root_dir + backend, standard)


def main():
    make_operator_entries_all_backend()


main()
